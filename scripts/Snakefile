ids, = glob_wildcards("input/{id}_R1.fastq.gz")
idsgrna, = glob_wildcards("input/gRNA_{idgrna}.fasta")
ref,= glob_wildcards("input/ref_{refe}.fasta")

# assume refrence index is available

ref1, stuff = zip(*[(ref.split('_')[0], "_".join(ref.split('_')[1:])) for ref in glob_wildcards("input/{refs}_R1.fastq.gz")[0]])

def valid_combinations():
	for r, s in zip(ref1, stuff):
		yield "{}_{}.ref_{}.log".format(r,s,r)

def valid_combinations_indel():
        for r, s in zip(ref1, stuff):
                yield "{}_{}.ref_{}.indel.log".format(r,s,r)
rule master:
	input:
		valid_combinations(),
		valid_combinations_indel(),
		#expand('{reads}.ref_{references}.txt', reads = ids, references = ref),
		#expand('alignment/sorted/gRNA_{grna}.ref_{references}.sorted.bam', grna = idsgrna, references=ref),
	message: 'MASTER rule'

rule index_ref:
	input: 'input/ref_{references}.fasta'
	output: 'input/ref_{references}.fasta.bwt'
	shell: 'bwa index {input} && samtools faidx {input}'


rule align_grna_ref:
	input: 'input/ref_{references}.fasta', 'input/gRNA_{grna}.fasta',  
	output: 'alignment/gRNA_{grna}.ref_{references}.bam', 
	log: 'output/gRNA_{grna}.ref_{references}.bam.log'
	message: 'Creating {output}'
	threads: 2
	shell: 'bwa mem -t12 -k 2 -r 2 -T 0 {input[0]} {input[1]} | samtools view -Sb - > {output[0]} 2> {log}'

rule sort_grnaalns:
	input: 'alignment/gRNA_{grna}.ref_{references}.bam'
	output:'alignment/sorted/gRNA_{grna}.ref_{references}.sorted.bam', 
	log: 'alignment/sorted/gRNA_{grna}.ref_{references}.sorted.bam.log'
	shell: 'picard SortSam VALIDATION_STRINGENCY=LENIENT MAX_RECORDS_IN_RAM=50000 SORT_ORDER=coordinate CREATE_INDEX=true CREATE_MD5_FILE=true I={input[0]} O={output[0]} > {log} 2>&1'

rule align_edited:
	input: 'input/ref_{references}.fasta', 'input/{reads}_R1.fastq.gz', 'input/{reads}_R2.fastq.gz'
	output: 'alignment/{reads}.ref_{references}.bam'
	log: 'alignment/{reads}.ref_{references}.bam.log'
	shell: 'bwa mem -t12 {input[0]} {input[1]} {input[2]} | samtools view -Sb - > {output[0]} 2> {log}'

rule sort_readalns:
	input: 'alignment/{reads}.ref_{references}.bam'
	output:'alignment/sorted/{reads}.ref_{references}.srt.bam',
	log: 'alignment/sorted/{reads}.ref_{references}.srt.bam.log'
	shell: 'picard SortSam VALIDATION_STRINGENCY=LENIENT MAX_RECORDS_IN_RAM=50000 SORT_ORDER=coordinate CREATE_INDEX=true CREATE_MD5_FILE=true I={input[0]} O={output[0]} > {log} 2>&1'

rule call_submutations:
	input: 'alignment/sorted/{reads}.ref_{references}.srt.bam', 'input/ref_{references}.fasta'
	output: 'subs/{reads}.ref_{references}.vcf'
	log: 'subs/{reads}.ref_{references}.vcf.log'
	shell: 'samtools mpileup -d 1000000 -Q 0 -t AD,ADF,AD -ugf {input[1]} {input[0]} | bcftools call -mO z -Am -O v > {output} 2> {log}'

rule subs_analysis1:
	input: 'subs/{reads}.ref_{references}.vcf'
	output: temp('{reads}.ref_{references}.txt')
	shell: 'python3 count_analysis_samtools.py {input} {output}'

rule be_analysis:
	input: sub='{ref}_{something}_{ref}.txt',
	       e_type='input/Editor_type.txt',
               aln='alignment/sorted/gRNA_{ref}.ref_{ref}.sorted.bam'
	output: '{ref}_{something}_{ref}.log'
	shell: 'python3 be_analysis.py {input.e_type} {input.aln} {input.sub} {output}'

rule indels_analysis:
	input: grna = 'alignment/sorted/gRNA_{ref}.ref_{ref}.sorted.bam',
		bam = 'alignment/sorted/{ref}_{something}_{ref}.srt.bam',
	output: '{ref}_{something}_{ref}.indel.log'
	run:
		import pysam
		bam = input.grna
		print(bam)
		bamfile = pysam.AlignmentFile(str(bam), 'rb')
		for read in bamfile:
			val = read.pos

		start = int(val) + 1
		end = start + 30
		shell('samtools view -h {input.bam} {wildcards.ref}:{start}-{end} | samtools view -Sb - > alignment/sorted/{wildcards.ref}_{wildcards.something}_{wildcards.ref}.window.srt.bam')
		shell('python3 indel_analysis.py alignment/sorted/{wildcards.ref}_{wildcards.something}_{wildcards.ref}.window.srt.bam {start} {end} {output}') 
		shell('rm alignment/sorted/{wildcards.ref}_{wildcards.something}_{wildcards.ref}.window.srt.bam')
